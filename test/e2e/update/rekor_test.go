//go:build integration

package update

import (
	"context"
	"time"

	"github.com/securesign/operator/internal/constants"
	tufAction "github.com/securesign/operator/internal/controller/tuf/constants"
	"github.com/securesign/operator/test/e2e/support/tas"

	rekorAction "github.com/securesign/operator/internal/controller/rekor/actions"
	"github.com/securesign/operator/test/e2e/support/tas/rekor"
	"github.com/securesign/operator/test/e2e/support/tas/tuf"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/securesign/operator/api/v1alpha1"
	"github.com/securesign/operator/test/e2e/support"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/meta"
	"k8s.io/apimachinery/pkg/types"
	runtimeCli "sigs.k8s.io/controller-runtime/pkg/client"
)

var _ = Describe("Rekor update", Ordered, func() {
	SetDefaultEventuallyTimeout(time.Duration(5) * time.Minute)
	cli, _ := support.CreateClient()
	ctx := context.TODO()

	var targetImageName string
	var namespace *v1.Namespace
	var s *v1alpha1.Securesign

	AfterEach(func() {
		if CurrentSpecReport().Failed() && support.IsCIEnvironment() {
			support.DumpNamespace(ctx, cli, namespace.Name)
		}
	})

	BeforeAll(func() {
		namespace = support.CreateTestNamespace(ctx, cli)
		DeferCleanup(func() {
			_ = cli.Delete(ctx, namespace)
		})
		s = securesignResource(namespace)
	})

	BeforeAll(func() {
		targetImageName = support.PrepareImage(ctx)
	})

	Describe("Install with autogenerated certificates", func() {
		BeforeAll(func() {
			Expect(cli.Create(ctx, s)).To(Succeed())
		})

		It("All other components are running", func() {
			tas.VerifyAllComponents(ctx, cli, s, true)
		})
	})

	Describe("Change signer key", func() {
		var tufGeneration, rekorGeneration int64

		It("stored current deployment observed generations ", func() {
			tufGeneration = getDeploymentGeneration(ctx, cli,
				types.NamespacedName{Namespace: namespace.Name, Name: tufAction.DeploymentName},
			)
			Expect(tufGeneration).Should(BeNumerically(">", 0))
			rekorGeneration = getDeploymentGeneration(ctx, cli,
				types.NamespacedName{Namespace: namespace.Name, Name: rekorAction.ServerDeploymentName},
			)
			Expect(rekorGeneration).Should(BeNumerically(">", 0))
		})

		It("modified signer.keyRef", func() {
			Eventually(func(g Gomega) error {
				Expect(cli.Get(ctx, runtimeCli.ObjectKeyFromObject(s), s)).To(Succeed())
				s.Spec.Rekor.Signer = v1alpha1.RekorSigner{
					KMS: "secret",
					KeyRef: &v1alpha1.SecretKeySelector{
						LocalObjectReference: v1alpha1.LocalObjectReference{
							Name: "my-rekor-secret",
						},
						Key: "private",
					},
				}
				return cli.Update(ctx, s)
			}).WithTimeout(1 * time.Second).Should(Succeed())
		})

		It("has status SignerAvailable == Failure: waiting on my-rekor-secret", func() {
			Eventually(func(g Gomega) string {
				ctl := rekor.Get(ctx, cli, namespace.Name, s.Name)()
				g.Expect(ctl).NotTo(BeNil())
				c := meta.FindStatusCondition(ctl.Status.Conditions, rekorAction.ServerCondition)
				g.Expect(c).ToNot(BeNil())
				return c.Reason
			}).Should(Equal(constants.Initialize))
		})

		It("created my-rekor-secret", func() {
			Expect(cli.Create(ctx, rekor.CreateSecret(namespace.Name, "my-rekor-secret"))).Should(Succeed())
		})

		It("has status Ready", func() {
			Eventually(func(g Gomega) string {
				ctl := rekor.Get(ctx, cli, namespace.Name, s.Name)()
				g.Expect(ctl).NotTo(BeNil())
				return meta.FindStatusCondition(ctl.Status.Conditions, constants.Ready).Reason
			}).Should(Equal(constants.Ready))
		})

		It("updated Rekor deployment", func() {
			Eventually(func() int64 {
				return getDeploymentGeneration(ctx, cli, types.NamespacedName{Namespace: namespace.Name, Name: rekorAction.ServerDeploymentName})
			}).Should(BeNumerically(">", rekorGeneration))
		})

		It("update TUF deployment", func() {
			Eventually(func(g Gomega) error {
				g.Expect(cli.Get(ctx, runtimeCli.ObjectKeyFromObject(s), s)).To(Succeed())
				s.Spec.Tuf.Keys = []v1alpha1.TufKey{
					{
						Name: "rekor.pub",
						SecretRef: &v1alpha1.SecretKeySelector{
							LocalObjectReference: v1alpha1.LocalObjectReference{
								Name: "my-rekor-secret",
							},
							Key: "public",
						},
					},
					{
						Name: "fulcio_v1.crt.pem",
					},
					{
						Name: "tsa.certchain.pem",
					},
					{
						Name: "ctfe.pub",
					},
				}
				return cli.Update(ctx, s)
			}).WithTimeout(1 * time.Second).Should(Succeed())
			Eventually(func(g Gomega) []v1alpha1.TufKey {
				t := tuf.Get(ctx, cli, namespace.Name, s.Name)()
				return t.Status.Keys
			}).Should(And(HaveLen(4), WithTransform(func(keys []v1alpha1.TufKey) string {
				return keys[0].SecretRef.Name
			}, Equal("my-rekor-secret"))))
			tuf.RefreshTufRepository(ctx, cli, namespace.Name, s.Name)
		})

		It("verify CTlog and TUF", func() {
			rekor.Verify(ctx, cli, namespace.Name, s.Name, true)
			tuf.Verify(ctx, cli, namespace.Name, s.Name)
		})

		It("verify new configuration", func() {
			var r *v1.Pod
			Eventually(func(g Gomega) {
				r = rekor.GetServerPod(ctx, cli, namespace.Name)()
				g.Expect(r).NotTo(BeNil())
			}).Should(Succeed())
			Expect(r.Spec.Volumes).To(ContainElements(And(
				WithTransform(func(v v1.Volume) string { return v.Name }, Equal("rekor-private-key-volume")),
				WithTransform(func(v v1.Volume) string { return v.VolumeSource.Secret.SecretName }, Equal("my-rekor-secret")))))
		})

		It("verify by cosign", func() {
			tas.VerifyByCosign(ctx, cli, s, targetImageName)
		})
	})
})
